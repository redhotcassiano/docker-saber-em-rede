version: '3'
volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=200h'
      - '--web.enable-lifecycle'
    # restart: unless-stopped
    expose:
      - 9090
    ports:
      - "9090:9090"
  
  nodeexporter:
    image: prom/node-exporter:latest
    container_name: nodeexporter
    user: root
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    ports:
      - "9100:9100"
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/datasources
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/setup.sh:/setup.sh
    entrypoint: /setup.sh
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    expose:
      - 3000
    ports:
      - 3010:3000
      
  website:
    network_mode: host
    container_name: website
    restart: always
    environment:
      - PORT=8080
      - NODE_ENV=develop
    build: ../front-end
    command: yarn dev-docker
    volumes:
      - ../front-end:/usr/app/
      - /usr/app/node_modules
    ports:
      - "8080:8080" 
  api:
    network_mode: host
    container_name: api
    build: ../api
    command: yarn dev
    volumes:
      - ../api:/usr/app/
      - /usr/app/node_modules
    ports:
      - "3001:3001"
    
  apigateway:
    network_mode: host
    container_name: api-gateway
    build: ../api-gateway
    command: yarn dev
    volumes:
      - ../api-gateway:/usr/app/
      - /usr/app/node_modules
    ports:
      - "3000:3000"
      
  admin:
    network_mode: host
    container_name: admin
    build: ../admin
    command: yarn dev
    environment:
      - PORT=8081
      - NODE_ENV=develop
    volumes:
      - ../admin:/usr/app/
      - /usr/app/node_modules
    ports:
      - "8081:8081"    
    depends_on:
      - apigateway
      - website   
    